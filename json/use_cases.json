{
	"Use Case: Instructor Login": 
    {
    	"ID": "UC1",
  		"Actor(s)": "Instructor",
  		"Description": "This use case describes how an instructor logs into the Courses Management Application System.",
		"Pre-cond.": [
			"1. Application successfully initialized and running on respective host.",
			"2. Database initialized and running on respective host.",
			"3. Application successfully connected to database."
		],
  		"Main Flow": [
  			"1. The use case starts when an unauthenticated instructor attempts to access any of the applications' pages that require authentication, including the login page itself.",
  			" \t 1.1 If the instructor requests a page other than the login page.",
  			" \t 1.2 The application redirects to the login page.",
  			"2. The instructor enters his/her username and password and clicks the \"Sign in as Instructor\" button.",
  			"3. The application attempts to authenticate the instructor's credentials (username and password) with the respective credentials in the database.",
  			"4. The application redirects to the courses page."
  		],
  		"Alternative Flow": [
  			"1. The alternative flow begins after step 3.",
  			"2. The application determines the given instructor's credentials as invalid.",
  			"3. The application displays a \"Bad Credentials\" message."
		],
  		"Post-cond.": [
  			"The instructor is authenticated and can access any of the applications' pages."
  		]
	},
	
	"Use Case: Instructor Browse Courses":
	{
		"ID": "UC2",
		"Actor(s)": "Instructor",
		"Description": "This use case describes how an instructor browses the list of courses he is teaching.",
		"Pre-cond.": [
			"1. Application successfully initialized and running on respective host.",
			"2. Database initialized and running on respective host.",
			"3. Application successfully connected to database.",
			"4. Instructor successfully authenticated."
		],
		"Main Flow": [
			"1. The use case starts when an authenticated instructor navigates or is redirected to the browse courses page.",
			"2. The application fetches the courses which correspond to the authenticated instructor from the database.",
			"3. The application displays the fetched courses on the courses page."
		],
		"Post-cond.": [
  			" - "
  		]
	},
	
	"Use Case: Instructor Add Course":
	{
		"ID": "UC3",
		"Actor(s)": "Instructor",
		"Description": "This use case describes how an instructor adds a course he is teaching to the list of courses.",
		"Pre-cond.": [
			"1. Application successfully initialized and running on respective host.",
			"2. Database initialized and running on respective host.",
			"3. Application successfully connected to database.",
			"4. Instructor successfully authenticated.",
			"5. Application displays the browse courses page."
		],
		"Main Flow": [
			"1. The use case starts when an authenticated instructor clicks the \"Add Course\" button (on the browse courses page).",
			"2. The application redirects to the add course page.",
			"3. The instructor enters the course information (code, name, semester, syllabus, year).",
			"4. The instructor clicks the \"Submit\" button.",
			"5. The application inserts the new course to the database.",
			"6. The application redirects to the browse courses page."
		],
		"Alternative Flow 1": [
			"1. The alternative flow begins after step 2.",
			"2. The instructor may click on the \"Back to Courses\" button at any time.",
			"3 The application redirects to the browse courses page."
		],
		"Alternative Flow 2": [
			"1. The alternative flow begins after step 4.",
			"2. The application determines that the course code entered by the instructor already exists in the database.",
			"3. The application displays a \"Course code already exists\" message."
		],
		"Post-cond.": [
  			"The new course is successfully added and displayed along with the rest of the instructor's courses on the browse courses page'."
  		]
	},
	
	"Use Case: Instructor Delete Course": 
	{
		"ID": "UC4",
		"Actor(s)": "Instructor",
		"Description": "This use case describes how an instructor deletes a course from the list of courses.",
		"Pre-cond.": [
			"1. Application successfully initialized and running on respective host.",
			"2. Database initialized and running on respective host.",
			"3. Application successfully connected to database.",
			"4. Instructor successfully authenticated.",
			"5. Application displays the browse courses page."
		],
		"Main Flow": [
			"1. The use case starts when an authenticated instructor clicks the \"Delete\" button for one of the displayed courses (on the browse courses page).",
			"2. The application displays a warning prompt asking \"Are you sure you want to delete this course?\".",
			" \t 2.1 If the instructor clicks \"OK\" on the warning prompt.",
			" \t 2.2 The application deletes the course from the database."
		],
		"Alternative Flow": [
			"1. The alternative flow begins after step 2.",
			" \t 2.1 If the instructor clicks \"Cancel\" on the warning prompt.",
			" \t 2.2 The application does not delete the course from the database."
		],
		"Post-cond.": [
  			"The course is successfully deleted from the database and is no longer displayed along with the rest of the instructor's courses on the browse courses page'."
  		]
	},
	
	"Use Case: Instructor Update Course":
	{
		"ID": "UC5",
		"Actor(s)": "Instructor",
		"Description": "This use case describes how an instructor updates a course he is teaching from the list of courses.",
		"Pre-cond.": [
			"1. Application successfully initialized and running on respective host.",
			"2. Database initialized and running on respective host.",
			"3. Application successfully connected to database.",
			"4. Instructor successfully authenticated.",
			"5. Application displays the browse courses page."
		],
		"Main Flow": [
			"1. The use case starts when an authenticated instructor clicks the \"Update\" button for one of the displayed courses (on the browse courses page).",
			"2. The application redirects to the update course page.",
			"3. The instructor enters the course information (code, name, semester, syllabus, year) he wishes to update.",
			"4. The instructor clicks the \"Submit\" button.",
			"5. The application updates the course information on the database.",
			"6. The application redirects to the browse courses page."
		],
		"Alternative Flow 1": [
			"1. The alternative flow begins after step 2.",
			"2. The instructor may click on the \"Back to Courses\" button at any time.",
			"3 The application redirects to the browse courses page."
		],
		"Alternative Flow 2": [
			"1. The alternative flow begins after step 4.",
			"2. The application determines that the course code entered by the instructor already exists in the database on a different course than the one being updated.",
			"3. The application displays a \"Course code already exists\" message."
		],
		"Post-cond.": [
  			"The course information is successfully updated and displayed along with the rest of the instructor's courses on the browse courses page'."
  		]
	},
	
	"Use Case: Instructor Browse Student Registrations":
	{
		"ID": "UC6",
		"Actor(s)": "Instructor",
		"Description": "This use case describes how an instructor browses the list of student registrations for a course he is teaching.",
		"Pre-cond.": [
			"1. Application successfully initialized and running on respective host.",
			"2. Database initialized and running on respective host.",
			"3. Application successfully connected to database.",
			"4. Instructor successfully authenticated."
		],
		"Main Flow": [
			"1. The use case starts when an authenticated instructor navigates or is redirected to the list students (student registrations) page for a course he is teaching.",
			"2. The application fetches the course which contains its student registrations from the database.",
			"3. The application displays the fetched student registrations including details (reg. number, full name, semester, reg. year, mail, department) for each student on the student registrations page."
		],
		"Post-cond.": [
  			" - "
  		]
	},
	
	"Use Case: Instructor Add Student Registration":
	{
		"ID": "UC7",
		"Actor(s)": "Instructor",
		"Description": "This use case describes how an instructor adds a student registration for a course he is teaching.",
		"Pre-cond.": [
			"1. Application successfully initialized and running on respective host.",
			"2. Database initialized and running on respective host.",
			"3. Application successfully connected to database.",
			"4. Instructor successfully authenticated.",
			"5. Application displays the student registrations page."
		],
		"Main Flow": [
			"1. The use case starts when an authenticated instructor clicks the \"Add Student\" button (on the list student registrations page).",
			"2. The application redirects to the add student registration page.",
			"3. The instructor enters the student details (reg. number, full name, semester, reg. year, mail, department).",
			"4. The instructor clicks the \"Submit\" button.",
			"5. The application inserts the new student registration to the database.",
			" \t 5.1 If the student does not exist on the respective database table.",
			" \t 5.2 The application inserts the new student on the respective database table.",
			"6. The application redirects to the browse list student registrations page."
		],
		"Alternative Flow 1": [
			"1. The alternative flow begins after step 2.",
			"2. The instructor may click on the \"Back to Student Registrations\" button at any time.",
			"3 The application redirects to the list student registrations page."
		],
		"Alternative Flow 2": [
			"1. The alternative flow begins after step 4.",
			"2. The application determines that the registration number or the mail entered by the instructor already exists in the database for a different student.",
			"3. The application displays a \"This Registration Number or Mail is already registered for this class\" message."
		],
		"Post-cond.": [
  			"The new student registration and student details are successfully added and displayed along with the rest of the student registrations for the selected course on the list student registrations page'."
  		]
	},
	
	"Use Case: Instructor Delete Student Registration": 
	{
		"ID": "UC8",
		"Actor(s)": "Instructor",
		"Description": "This use case describes how an instructor deletes a student registration for a course he is teaching.",
		"Pre-cond.": [
			"1. Application successfully initialized and running on respective host.",
			"2. Database initialized and running on respective host.",
			"3. Application successfully connected to database.",
			"4. Instructor successfully authenticated.",
			"5. Application displays the student registrations page."
		],
		"Main Flow": [
			"1. The use case starts when an authenticated instructor clicks the \"Delete\" button for one of the displayed student registrations (on the list student registrations page).",
			"2. The application displays a warning prompt asking \"Are you sure you want to delete this student?\".",
			" \t 2.1 If the instructor clicks \"OK\" on the warning prompt.",
			" \t 2.2 The application deletes the student registration from the database.",
			" \t 2.2.1 If the selected student is not enrolled in any other course.",
			" \t 2.2.2 The application deletes the student from the database."
		],
		"Alternative Flow": [
			"1. The alternative flow begins after step 2.",
			" \t 2.1 If the instructor clicks \"Cancel\" on the warning prompt.",
			" \t 2.2 The application does not delete the student registration (or the student) from the database."
		],
		"Post-cond.": [
  			"The student registration (and possibly student) is successfully deleted from the database and is no longer displayed along with the rest of the student registrations for the selected course on the list student registrations page'."
  		]
	},
	
	"Use Case: Instructor Update Student Registration":
	{
		"ID": "UC9",
		"Actor(s)": "Instructor",
		"Description": "This use case describes how an instructor updates a student registrations for a course he is teaching.",
		"Pre-cond.": [
			"1. Application successfully initialized and running on respective host.",
			"2. Database initialized and running on respective host.",
			"3. Application successfully connected to database.",
			"4. Instructor successfully authenticated.",
			"5. Application displays the student registrations page."
		],
		"Main Flow": [
			"1. The use case starts when an authenticated instructor clicks the \"Update\" button for one of the displayed student registrations (on the list student registrations page).",
			"2. The application redirects to the update student registration page.",
			"3. The instructor enters the student details (reg. number, full name, semester, reg. year, mail, department).",
			"4. The instructor clicks the \"Submit\" button.",
			"5. The application updates the student registration and student information on the database.",
			"6. The application redirects to the list student registrations page."
		],
		"Alternative Flow 1": [
			"1. The alternative flow begins after step 2.",
			"2. The instructor may click on the \"Back to Student Registrations\" button at any time.",
			"3 The application redirects to the list student registrations page."
		],
		"Alternative Flow 2": [
			"1. The alternative flow begins after step 4.",
			"2. The application determines that the registration number or the mail entered by the instructor already exists in the database for a different student.",
			"3. The application displays a \"This Registration Number or Mail is already registered for this class\" message."
		],
		"Post-cond.": [
  			"The student registration and student information are successfully updated and displayed along with the rest of the student registrations for the selected course on the list student registrations page'."
  		]
	},
	
	"Use Case: Instructor Browse Students Grades":
	{
		"ID": "UC6-BONUS",
		"Actor(s)": "Instructor",
		"Description": "This use case describes how an instructor browses the list of student grades for a course he is teaching.",
		"Pre-cond.": [
			"1. Application successfully initialized and running on respective host.",
			"2. Database initialized and running on respective host.",
			"3. Application successfully connected to database.",
			"4. Instructor successfully authenticated."
		],
		"Main Flow": [
			"1. The use case starts when an authenticated instructor navigates to (by clicking on the \"View Grades\" button on the list student registrations page) or is redirected to the list student grades page for a course he is teaching.",
			"2. The application fetches the course from the database which contains its student registrations which in turn contain the grades for each student.",
			"3. The application displays the fetched student grades along with student full name and student reg. number for each student on the student grades page."
		],
		"Post-cond.": [
  			" - "
  		]
	},
	
	"Use Case: Instructor Register Student Grades":
	{
		"ID": "UC10",
		"Actor(s)": "Instructor",
		"Description": "This use case describes how an instructor registers grades for a student that is enrolled in a course he is teaching.",
		"Pre-cond.": [
			"1. Application successfully initialized and running on respective host.",
			"2. Database initialized and running on respective host.",
			"3. Application successfully connected to database.",
			"4. Instructor successfully authenticated.",
			"5. Application displays the student grades page."
		],
		"Main Flow": [
			"1. The use case starts when an authenticated instructor clicks the \"Add Grades\" image button for one of the displayed students (on the list student grades page).",
			"2. The application redirects to the update student grades page.",
			"3. The instructor enters the student's project grade and exam grade.",
			"4. The instructor clicks the \"Submit\" button.",
			"5. The application updates the student grades on the database.",
			"6. The application redirects to the list student grades page."
		],
		"Alternative Flow 1": [
			"1. The alternative flow begins after step 2.",
			"2. The instructor may click on the \"Back to Student Grades\" button at any time.",
			"3 The application redirects to the list student grades page."
		],
		"Post-cond.": [
  			"The student grades are successfully updated and displayed along with the rest of the student grades for the selected course on the list student grades page'."
  		]
	},
	
		"Use Case: Instructor Calculate Overall Student Grades":
	{
		"ID": "UC11",
		"Actor(s)": "Instructor",
		"Description": "This use case describes how an instructor calculates overall grades for all the students that are enrolled in a course he is teaching.",
		"Pre-cond.": [
			"1. Application successfully initialized and running on respective host.",
			"2. Database initialized and running on respective host.",
			"3. Application successfully connected to database.",
			"4. Instructor successfully authenticated.",
			"5. Application displays the student grades page."
		],
		"Main Flow": [
			"1. The use case starts when an authenticated instructor clicks the \"Get Total Grades\" on the list student grades page.",
			"2. The application iterates over all the registered students in the course.",
			" \t 2.1 If the current students' project grade and exam grade fields contain valid numbers.'",
			" \t 2.2 The application computes the students' total grade using the project grade and exam grade with respect to a weighted average.",
			"3. The application saves the total grade to the database for each student.",
			"4. The application redirects to the list student grades page."
		],
		"Post-cond.": [
  			"The total grades are successfully calculated, saved and displayed on the list student grades page'."
  		]
	}
		
}